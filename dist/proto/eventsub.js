"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SendEventRequest_one_of_decls, _SendEventResponse_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubServiceClient = exports.UnimplementedEventSubServiceService = exports.SendEventResponse = exports.SendEventRequest = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: proto/eventsub.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = __importStar(require("google-protobuf"));
const grpc_1 = __importStar(require("@grpc/grpc-js"));
class SendEventRequest extends pb_1.Message {
    constructor(data) {
        super();
        _SendEventRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _SendEventRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("event" in data && data.event != undefined) {
                this.event = data.event;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set type(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get event() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set event(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new SendEventRequest({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.event != null) {
            message.event = data.event;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.event != null) {
            data.event = this.event;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type.length)
            writer.writeString(1, this.type);
        if (this.event.length)
            writer.writeString(2, this.event);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendEventRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readString();
                    break;
                case 2:
                    message.event = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SendEventRequest.deserialize(bytes);
    }
}
exports.SendEventRequest = SendEventRequest;
_SendEventRequest_one_of_decls = new WeakMap();
class SendEventResponse extends pb_1.Message {
    constructor(data) {
        super();
        _SendEventResponse_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _SendEventResponse_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set status(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set message(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new SendEventResponse({});
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status != 0)
            writer.writeUint32(1, this.status);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendEventResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readUint32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SendEventResponse.deserialize(bytes);
    }
}
exports.SendEventResponse = SendEventResponse;
_SendEventResponse_one_of_decls = new WeakMap();
class UnimplementedEventSubServiceService {
}
exports.UnimplementedEventSubServiceService = UnimplementedEventSubServiceService;
UnimplementedEventSubServiceService.definition = {
    SendEvent: {
        path: "/EventSubService/SendEvent",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => SendEventRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => SendEventResponse.deserialize(new Uint8Array(bytes))
    }
};
class EventSubServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedEventSubServiceService.definition, "EventSubService", {}) {
    constructor(address, credentials, options) {
        super(address, credentials, options);
        this.SendEvent = (message, metadata, options, callback) => {
            return super.SendEvent(message, metadata, options, callback);
        };
    }
}
exports.EventSubServiceClient = EventSubServiceClient;
