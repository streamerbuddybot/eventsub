/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: proto/sendChatMessage.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class JoinChatRequest extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          channel?: string;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("channel" in data && data.channel != undefined) {
        this.channel = data.channel;
      }
    }
  }
  get channel() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set channel(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: { channel?: string }): JoinChatRequest {
    const message = new JoinChatRequest({});
    if (data.channel != null) {
      message.channel = data.channel;
    }
    return message;
  }
  toObject() {
    const data: {
      channel?: string;
    } = {};
    if (this.channel != null) {
      data.channel = this.channel;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.channel.length) writer.writeString(2, this.channel);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinChatRequest {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new JoinChatRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 2:
          message.channel = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): JoinChatRequest {
    return JoinChatRequest.deserialize(bytes);
  }
}
export class JoinChatResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          success?: boolean;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("success" in data && data.success != undefined) {
        this.success = data.success;
      }
    }
  }
  get success() {
    return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
  }
  set success(value: boolean) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: { success?: boolean }): JoinChatResponse {
    const message = new JoinChatResponse({});
    if (data.success != null) {
      message.success = data.success;
    }
    return message;
  }
  toObject() {
    const data: {
      success?: boolean;
    } = {};
    if (this.success != null) {
      data.success = this.success;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.success != false) writer.writeBool(1, this.success);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinChatResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new JoinChatResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.success = reader.readBool();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): JoinChatResponse {
    return JoinChatResponse.deserialize(bytes);
  }
}
export class LeaveChatRequest extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          channel?: string;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("channel" in data && data.channel != undefined) {
        this.channel = data.channel;
      }
    }
  }
  get channel() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set channel(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: { channel?: string }): LeaveChatRequest {
    const message = new LeaveChatRequest({});
    if (data.channel != null) {
      message.channel = data.channel;
    }
    return message;
  }
  toObject() {
    const data: {
      channel?: string;
    } = {};
    if (this.channel != null) {
      data.channel = this.channel;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.channel.length) writer.writeString(2, this.channel);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaveChatRequest {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new LeaveChatRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 2:
          message.channel = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): LeaveChatRequest {
    return LeaveChatRequest.deserialize(bytes);
  }
}
export class LeaveChatResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          success?: boolean;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("success" in data && data.success != undefined) {
        this.success = data.success;
      }
    }
  }
  get success() {
    return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
  }
  set success(value: boolean) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: { success?: boolean }): LeaveChatResponse {
    const message = new LeaveChatResponse({});
    if (data.success != null) {
      message.success = data.success;
    }
    return message;
  }
  toObject() {
    const data: {
      success?: boolean;
    } = {};
    if (this.success != null) {
      data.success = this.success;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.success != false) writer.writeBool(1, this.success);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaveChatResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new LeaveChatResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.success = reader.readBool();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): LeaveChatResponse {
    return LeaveChatResponse.deserialize(bytes);
  }
}
export class SendMessageRequest extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          channel?: string;
          message?: string;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("channel" in data && data.channel != undefined) {
        this.channel = data.channel;
      }
      if ("message" in data && data.message != undefined) {
        this.message = data.message;
      }
    }
  }
  get channel() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set channel(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  get message() {
    return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
  }
  set message(value: string) {
    pb_1.Message.setField(this, 3, value);
  }
  static fromObject(data: { channel?: string; message?: string }): SendMessageRequest {
    const message = new SendMessageRequest({});
    if (data.channel != null) {
      message.channel = data.channel;
    }
    if (data.message != null) {
      message.message = data.message;
    }
    return message;
  }
  toObject() {
    const data: {
      channel?: string;
      message?: string;
    } = {};
    if (this.channel != null) {
      data.channel = this.channel;
    }
    if (this.message != null) {
      data.message = this.message;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.channel.length) writer.writeString(2, this.channel);
    if (this.message.length) writer.writeString(3, this.message);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMessageRequest {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new SendMessageRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 2:
          message.channel = reader.readString();
          break;
        case 3:
          message.message = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): SendMessageRequest {
    return SendMessageRequest.deserialize(bytes);
  }
}
export class SendMessageResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          success?: boolean;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == "object") {
      if ("success" in data && data.success != undefined) {
        this.success = data.success;
      }
    }
  }
  get success() {
    return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
  }
  set success(value: boolean) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: { success?: boolean }): SendMessageResponse {
    const message = new SendMessageResponse({});
    if (data.success != null) {
      message.success = data.success;
    }
    return message;
  }
  toObject() {
    const data: {
      success?: boolean;
    } = {};
    if (this.success != null) {
      data.success = this.success;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.success != false) writer.writeBool(1, this.success);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMessageResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new SendMessageResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.success = reader.readBool();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): SendMessageResponse {
    return SendMessageResponse.deserialize(bytes);
  }
}
interface GrpcUnaryServiceInterface<P, R> {
  (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
  (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
  (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
  (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
  (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
  (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedChatServiceService {
  static definition = {
    Join: {
      path: "/ChatService/Join",
      requestStream: false,
      responseStream: false,
      requestSerialize: (message: JoinChatRequest) => Buffer.from(message.serialize()),
      requestDeserialize: (bytes: Buffer) => JoinChatRequest.deserialize(new Uint8Array(bytes)),
      responseSerialize: (message: JoinChatResponse) => Buffer.from(message.serialize()),
      responseDeserialize: (bytes: Buffer) => JoinChatResponse.deserialize(new Uint8Array(bytes)),
    },
    Leave: {
      path: "/ChatService/Leave",
      requestStream: false,
      responseStream: false,
      requestSerialize: (message: LeaveChatRequest) => Buffer.from(message.serialize()),
      requestDeserialize: (bytes: Buffer) => LeaveChatRequest.deserialize(new Uint8Array(bytes)),
      responseSerialize: (message: LeaveChatResponse) => Buffer.from(message.serialize()),
      responseDeserialize: (bytes: Buffer) => LeaveChatResponse.deserialize(new Uint8Array(bytes)),
    },
    SendMessage: {
      path: "/ChatService/SendMessage",
      requestStream: false,
      responseStream: false,
      requestSerialize: (message: SendMessageRequest) => Buffer.from(message.serialize()),
      requestDeserialize: (bytes: Buffer) => SendMessageRequest.deserialize(new Uint8Array(bytes)),
      responseSerialize: (message: SendMessageResponse) => Buffer.from(message.serialize()),
      responseDeserialize: (bytes: Buffer) => SendMessageResponse.deserialize(new Uint8Array(bytes)),
    },
  };
  [method: string]: grpc_1.UntypedHandleCall;
  abstract Join(call: grpc_1.ServerUnaryCall<JoinChatRequest, JoinChatResponse>, callback: grpc_1.sendUnaryData<JoinChatResponse>): void;
  abstract Leave(call: grpc_1.ServerUnaryCall<LeaveChatRequest, LeaveChatResponse>, callback: grpc_1.sendUnaryData<LeaveChatResponse>): void;
  abstract SendMessage(
    call: grpc_1.ServerUnaryCall<SendMessageRequest, SendMessageResponse>,
    callback: grpc_1.sendUnaryData<SendMessageResponse>
  ): void;
}
export class ChatServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedChatServiceService.definition, "ChatService", {}) {
  constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
    super(address, credentials, options);
  }
  Join: GrpcUnaryServiceInterface<JoinChatRequest, JoinChatResponse> = (
    message: JoinChatRequest,
    metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JoinChatResponse>,
    options?: grpc_1.CallOptions | grpc_1.requestCallback<JoinChatResponse>,
    callback?: grpc_1.requestCallback<JoinChatResponse>
  ): grpc_1.ClientUnaryCall => {
    return super.Join(message, metadata, options, callback);
  };
  Leave: GrpcUnaryServiceInterface<LeaveChatRequest, LeaveChatResponse> = (
    message: LeaveChatRequest,
    metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LeaveChatResponse>,
    options?: grpc_1.CallOptions | grpc_1.requestCallback<LeaveChatResponse>,
    callback?: grpc_1.requestCallback<LeaveChatResponse>
  ): grpc_1.ClientUnaryCall => {
    return super.Leave(message, metadata, options, callback);
  };
  SendMessage: GrpcUnaryServiceInterface<SendMessageRequest, SendMessageResponse> = (
    message: SendMessageRequest,
    metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendMessageResponse>,
    options?: grpc_1.CallOptions | grpc_1.requestCallback<SendMessageResponse>,
    callback?: grpc_1.requestCallback<SendMessageResponse>
  ): grpc_1.ClientUnaryCall => {
    return super.SendMessage(message, metadata, options, callback);
  };
}
