/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: proto/channelPoints.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
 import * as pb_1 from "google-protobuf";
 import * as grpc_1 from "@grpc/grpc-js";
 export class channelPointRequest extends pb_1.Message {
     #one_of_decls: number[][] = [];
     constructor(data?: any[] | {
         eventType?: string;
         eventData?: string;
         eventStorage?: string;
     }) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") {
             if ("eventType" in data && data.eventType != undefined) {
                 this.eventType = data.eventType;
             }
             if ("eventData" in data && data.eventData != undefined) {
                 this.eventData = data.eventData;
             }
             if ("eventStorage" in data && data.eventStorage != undefined) {
                 this.eventStorage = data.eventStorage;
             }
         }
     }
     get eventType() {
         return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
     }
     set eventType(value: string) {
         pb_1.Message.setField(this, 2, value);
     }
     get eventData() {
         return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
     }
     set eventData(value: string) {
         pb_1.Message.setField(this, 3, value);
     }
     get eventStorage() {
         return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
     }
     set eventStorage(value: string) {
         pb_1.Message.setField(this, 4, value);
     }
     static fromObject(data: {
         eventType?: string;
         eventData?: string;
         eventStorage?: string;
     }): channelPointRequest {
         const message = new channelPointRequest({});
         if (data.eventType != null) {
             message.eventType = data.eventType;
         }
         if (data.eventData != null) {
             message.eventData = data.eventData;
         }
         if (data.eventStorage != null) {
             message.eventStorage = data.eventStorage;
         }
         return message;
     }
     toObject() {
         const data: {
             eventType?: string;
             eventData?: string;
             eventStorage?: string;
         } = {};
         if (this.eventType != null) {
             data.eventType = this.eventType;
         }
         if (this.eventData != null) {
             data.eventData = this.eventData;
         }
         if (this.eventStorage != null) {
             data.eventStorage = this.eventStorage;
         }
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (this.eventType.length)
             writer.writeString(2, this.eventType);
         if (this.eventData.length)
             writer.writeString(3, this.eventData);
         if (this.eventStorage.length)
             writer.writeString(4, this.eventStorage);
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): channelPointRequest {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new channelPointRequest();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 case 2:
                     message.eventType = reader.readString();
                     break;
                 case 3:
                     message.eventData = reader.readString();
                     break;
                 case 4:
                     message.eventStorage = reader.readString();
                     break;
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): channelPointRequest {
         return channelPointRequest.deserialize(bytes);
     }
 }
 export class channelPointResponse extends pb_1.Message {
     #one_of_decls: number[][] = [];
     constructor(data?: any[] | {
         code?: number;
         message?: string;
     }) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") {
             if ("code" in data && data.code != undefined) {
                 this.code = data.code;
             }
             if ("message" in data && data.message != undefined) {
                 this.message = data.message;
             }
         }
     }
     get code() {
         return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
     }
     set code(value: number) {
         pb_1.Message.setField(this, 1, value);
     }
     get message() {
         return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
     }
     set message(value: string) {
         pb_1.Message.setField(this, 2, value);
     }
     static fromObject(data: {
         code?: number;
         message?: string;
     }): channelPointResponse {
         const message = new channelPointResponse({});
         if (data.code != null) {
             message.code = data.code;
         }
         if (data.message != null) {
             message.message = data.message;
         }
         return message;
     }
     toObject() {
         const data: {
             code?: number;
             message?: string;
         } = {};
         if (this.code != null) {
             data.code = this.code;
         }
         if (this.message != null) {
             data.message = this.message;
         }
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (this.code != 0)
             writer.writeInt32(1, this.code);
         if (this.message.length)
             writer.writeString(2, this.message);
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): channelPointResponse {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new channelPointResponse();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 case 1:
                     message.code = reader.readInt32();
                     break;
                 case 2:
                     message.message = reader.readString();
                     break;
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): channelPointResponse {
         return channelPointResponse.deserialize(bytes);
     }
 }
 interface GrpcUnaryServiceInterface<P, R> {
     (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
     (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
     (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
     (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
 }
 interface GrpcStreamServiceInterface<P, R> {
     (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
     (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
 }
 interface GrpWritableServiceInterface<P, R> {
     (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
     (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
     (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
     (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
 }
 interface GrpcChunkServiceInterface<P, R> {
     (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
     (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
 }
 interface GrpcPromiseServiceInterface<P, R> {
     (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
     (message: P, options?: grpc_1.CallOptions): Promise<R>;
 }
 export abstract class UnimplementedchannelPointServiceService {
     static definition = {
         SendEvent: {
             path: "/channelPointService/SendEvent",
             requestStream: false,
             responseStream: false,
             requestSerialize: (message: channelPointRequest) => Buffer.from(message.serialize()),
             requestDeserialize: (bytes: Buffer) => channelPointRequest.deserialize(new Uint8Array(bytes)),
             responseSerialize: (message: channelPointResponse) => Buffer.from(message.serialize()),
             responseDeserialize: (bytes: Buffer) => channelPointResponse.deserialize(new Uint8Array(bytes))
         }
     };
     [method: string]: grpc_1.UntypedHandleCall;
     abstract SendEvent(call: grpc_1.ServerUnaryCall<channelPointRequest, channelPointResponse>, callback: grpc_1.sendUnaryData<channelPointResponse>): void;
 }
 export class channelPointServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedchannelPointServiceService.definition, "channelPointService", {}) {
     constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
         super(address, credentials, options);
     }
     SendEvent: GrpcUnaryServiceInterface<channelPointRequest, channelPointResponse> = (message: channelPointRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<channelPointResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<channelPointResponse>, callback?: grpc_1.requestCallback<channelPointResponse>): grpc_1.ClientUnaryCall => {
         return super.SendEvent(message, metadata, options, callback);
     };
 }
 