/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: proto/handleAction.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
 import * as pb_1 from "google-protobuf";
 import * as grpc_1 from "@grpc/grpc-js";
 export class ActionData extends pb_1.Message {
     #one_of_decls: number[][] = [];
     constructor(data?: any[] | {
         channelID?: number;
         channelName?: string;
         userID?: number;
         userinput?: string;
         username?: string;
         message?: string;
     }) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") {
             if ("channelID" in data && data.channelID != undefined) {
                 this.channelID = data.channelID;
             }
             if ("channelName" in data && data.channelName != undefined) {
                 this.channelName = data.channelName;
             }
             if ("userID" in data && data.userID != undefined) {
                 this.userID = data.userID;
             }
             if ("userinput" in data && data.userinput != undefined) {
                 this.userinput = data.userinput;
             }
             if ("username" in data && data.username != undefined) {
                 this.username = data.username;
             }
             if ("message" in data && data.message != undefined) {
                 this.message = data.message;
             }
         }
     }
     get channelID() {
         return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
     }
     set channelID(value: number) {
         pb_1.Message.setField(this, 1, value);
     }
     get channelName() {
         return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
     }
     set channelName(value: string) {
         pb_1.Message.setField(this, 2, value);
     }
     get userID() {
         return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
     }
     set userID(value: number) {
         pb_1.Message.setField(this, 3, value);
     }
     get userinput() {
         return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
     }
     set userinput(value: string) {
         pb_1.Message.setField(this, 4, value);
     }
     get username() {
         return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
     }
     set username(value: string) {
         pb_1.Message.setField(this, 5, value);
     }
     get message() {
         return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
     }
     set message(value: string) {
         pb_1.Message.setField(this, 6, value);
     }
     static fromObject(data: {
         channelID?: number;
         channelName?: string;
         userID?: number;
         userinput?: string;
         username?: string;
         message?: string;
     }): ActionData {
         const message = new ActionData({});
         if (data.channelID != null) {
             message.channelID = data.channelID;
         }
         if (data.channelName != null) {
             message.channelName = data.channelName;
         }
         if (data.userID != null) {
             message.userID = data.userID;
         }
         if (data.userinput != null) {
             message.userinput = data.userinput;
         }
         if (data.username != null) {
             message.username = data.username;
         }
         if (data.message != null) {
             message.message = data.message;
         }
         return message;
     }
     toObject() {
         const data: {
             channelID?: number;
             channelName?: string;
             userID?: number;
             userinput?: string;
             username?: string;
             message?: string;
         } = {};
         if (this.channelID != null) {
             data.channelID = this.channelID;
         }
         if (this.channelName != null) {
             data.channelName = this.channelName;
         }
         if (this.userID != null) {
             data.userID = this.userID;
         }
         if (this.userinput != null) {
             data.userinput = this.userinput;
         }
         if (this.username != null) {
             data.username = this.username;
         }
         if (this.message != null) {
             data.message = this.message;
         }
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (this.channelID != 0)
             writer.writeInt32(1, this.channelID);
         if (this.channelName.length)
             writer.writeString(2, this.channelName);
         if (this.userID != 0)
             writer.writeInt32(3, this.userID);
         if (this.userinput.length)
             writer.writeString(4, this.userinput);
         if (this.username.length)
             writer.writeString(5, this.username);
         if (this.message.length)
             writer.writeString(6, this.message);
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActionData {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActionData();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 case 1:
                     message.channelID = reader.readInt32();
                     break;
                 case 2:
                     message.channelName = reader.readString();
                     break;
                 case 3:
                     message.userID = reader.readInt32();
                     break;
                 case 4:
                     message.userinput = reader.readString();
                     break;
                 case 5:
                     message.username = reader.readString();
                     break;
                 case 6:
                     message.message = reader.readString();
                     break;
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): ActionData {
         return ActionData.deserialize(bytes);
     }
 }
 export class ActionRequest extends pb_1.Message {
     #one_of_decls: number[][] = [];
     constructor(data?: any[] | {
         Action?: string;
         Actiondata?: ActionData;
     }) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") {
             if ("Action" in data && data.Action != undefined) {
                 this.Action = data.Action;
             }
             if ("Actiondata" in data && data.Actiondata != undefined) {
                 this.Actiondata = data.Actiondata;
             }
         }
     }
     get Action() {
         return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
     }
     set Action(value: string) {
         pb_1.Message.setField(this, 2, value);
     }
     get Actiondata() {
         return pb_1.Message.getWrapperField(this, ActionData, 3) as ActionData;
     }
     set Actiondata(value: ActionData) {
         pb_1.Message.setWrapperField(this, 3, value);
     }
     get has_Actiondata() {
         return pb_1.Message.getField(this, 3) != null;
     }
     static fromObject(data: {
         Action?: string;
         Actiondata?: ReturnType<typeof ActionData.prototype.toObject>;
     }): ActionRequest {
         const message = new ActionRequest({});
         if (data.Action != null) {
             message.Action = data.Action;
         }
         if (data.Actiondata != null) {
             message.Actiondata = ActionData.fromObject(data.Actiondata);
         }
         return message;
     }
     toObject() {
         const data: {
             Action?: string;
             Actiondata?: ReturnType<typeof ActionData.prototype.toObject>;
         } = {};
         if (this.Action != null) {
             data.Action = this.Action;
         }
         if (this.Actiondata != null) {
             data.Actiondata = this.Actiondata.toObject();
         }
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (this.Action.length)
             writer.writeString(2, this.Action);
         if (this.has_Actiondata)
             writer.writeMessage(3, this.Actiondata, () => this.Actiondata.serialize(writer));
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActionRequest {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActionRequest();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 case 2:
                     message.Action = reader.readString();
                     break;
                 case 3:
                     reader.readMessage(message.Actiondata, () => message.Actiondata = ActionData.deserialize(reader));
                     break;
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): ActionRequest {
         return ActionRequest.deserialize(bytes);
     }
 }
 export class ActionResponse extends pb_1.Message {
     #one_of_decls: number[][] = [];
     constructor(data?: any[] | {
         code?: number;
         message?: string;
     }) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") {
             if ("code" in data && data.code != undefined) {
                 this.code = data.code;
             }
             if ("message" in data && data.message != undefined) {
                 this.message = data.message;
             }
         }
     }
     get code() {
         return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
     }
     set code(value: number) {
         pb_1.Message.setField(this, 1, value);
     }
     get message() {
         return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
     }
     set message(value: string) {
         pb_1.Message.setField(this, 2, value);
     }
     static fromObject(data: {
         code?: number;
         message?: string;
     }): ActionResponse {
         const message = new ActionResponse({});
         if (data.code != null) {
             message.code = data.code;
         }
         if (data.message != null) {
             message.message = data.message;
         }
         return message;
     }
     toObject() {
         const data: {
             code?: number;
             message?: string;
         } = {};
         if (this.code != null) {
             data.code = this.code;
         }
         if (this.message != null) {
             data.message = this.message;
         }
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (this.code != 0)
             writer.writeInt32(1, this.code);
         if (this.message.length)
             writer.writeString(2, this.message);
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActionResponse {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActionResponse();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 case 1:
                     message.code = reader.readInt32();
                     break;
                 case 2:
                     message.message = reader.readString();
                     break;
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): ActionResponse {
         return ActionResponse.deserialize(bytes);
     }
 }
 interface GrpcUnaryServiceInterface<P, R> {
     (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
     (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
     (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
     (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
 }
 interface GrpcStreamServiceInterface<P, R> {
     (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
     (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
 }
 interface GrpWritableServiceInterface<P, R> {
     (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
     (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
     (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
     (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
 }
 interface GrpcChunkServiceInterface<P, R> {
     (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
     (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
 }
 interface GrpcPromiseServiceInterface<P, R> {
     (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
     (message: P, options?: grpc_1.CallOptions): Promise<R>;
 }
 export abstract class UnimplementedActionServiceService {
     static definition = {
         SendAction: {
             path: "/ActionService/SendAction",
             requestStream: false,
             responseStream: false,
             requestSerialize: (message: ActionRequest) => Buffer.from(message.serialize()),
             requestDeserialize: (bytes: Buffer) => ActionRequest.deserialize(new Uint8Array(bytes)),
             responseSerialize: (message: ActionResponse) => Buffer.from(message.serialize()),
             responseDeserialize: (bytes: Buffer) => ActionResponse.deserialize(new Uint8Array(bytes))
         }
     };
     [method: string]: grpc_1.UntypedHandleCall;
     abstract SendAction(call: grpc_1.ServerUnaryCall<ActionRequest, ActionResponse>, callback: grpc_1.sendUnaryData<ActionResponse>): void;
 }
 export class ActionServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedActionServiceService.definition, "ActionService", {}) {
     constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
         super(address, credentials, options);
     }
     SendAction: GrpcUnaryServiceInterface<ActionRequest, ActionResponse> = (message: ActionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ActionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ActionResponse>, callback?: grpc_1.requestCallback<ActionResponse>): grpc_1.ClientUnaryCall => {
         return super.SendAction(message, metadata, options, callback);
     };
 }
 